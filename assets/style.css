/* CORRECCION:
    Falta reset de margin, pading, box-sizing.
    Falta que sea diseño mobile first.
    Falta uso de clases atómicas.
    Falta agrupar por funcionalidad y comentar: esto facilita mantenimiento y escalabiliad
*/
body {
    font-family: 'Advent pro';
    background-color: #E5E5E5;
}
/* CORRECCION:
    Falta z-index positivo para que se quede por encima del resto de elementos. Actualmente, cuando se superpone con otro elemento no pueden pulsarse los enlaces.
    También necesita un font-size mayor en pantallas grandes y un background color para
    que no se entremezcle con los fondos (puedes jugar con la opacidad si no quieres que sea solido).
*/
nav {
    position: fixed;
    top: 0;
    width: 100%;
    margin: 0.5em;
}
nav a{
    color: black;
}
/* CORRECCION:
    Font-size lo cogemos mejor respecto al navegador (rem).
*/
.header_container {
    height: 10em;
    padding: 5em;
    font-size: 2em;
    background-image: url(./image/Fondo2.jpg);
    background-size: cover;
    background-position: center;
    padding: 3em;
}
.fotohome {
    width: 400px;
    height: 300px;
    margin: 1em;
}
.main{
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    flex-wrap: wrap;
    margin: 1em;
}
/* CORRECCION:
    position te va a coger referencia sobre el ancestro más cercano con una position diferente de static, sino encuentra será respecto de la pantalla. En cualquier caso, solo coge referencia respecto a (top O bottom) Y (left O right). Pero en ambos casos son excluyentes (si coge left y right se anulan entre si, lo mismo top y bottom)
*/
.background-video {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    opacity: 0.7;
}

.page-hero {
    position: relative;
    overflow: hidden;
}

.background-video-content {
    position: relative;
    z-index: 1;
}

video[poster] {
    object-fit: cover;
    height: 15em;
    width: 100em;
    margin: 1em;
}

/* CORRECCION:
    rem => coge medida relativa respecto al font-size del navegador
    em => coge medida relativa respecto al font-size del elemento padre
    % => coge medida relativa respecto al tamaño del contenedor padre
    Por tanto para height y width con % te será más fácil aplicar el valor que quieras.
*/
.header_portafolio {
    height: 10em;
    padding: 5em;
    font-size: 2em;
    padding: 3em;
}
.port img {
    display: block;
    width: 27em;
    height: 20em;
    margin: 2em;
    
}
.port {
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    flex-wrap: wrap;
    padding: 10em;

}
.header_sobremi {
    height: 10em;
    padding: 5em;
    font-size: 2em;
    background-image: url(./image/portadaES.jpg);
    background-size: cover;
    background-position: center;
    padding: 3em;
}
.fotos_sobremi{
    display: flex;
    justify-content: space-around;
    margin: 2em;
}
.fotobio {
    width: 300px;
    height: 200px;
}
.footer {
    background-color: #294447;
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    flex-wrap: wrap;
    margin: 2em;
    padding: 0.5em;
}
.contacto {
    transition: transform 0.3s ease-out;
}
.contacto:hover {
    transform: translateY(8px);
}
.contact {
    height: 10em;
    padding: 5em;
    font-size: 2em;
    background-image: url(./image/30.jpg);
    background-size: cover;
    background-position: center;
    padding: 3em;
}
.formulario {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 2em;
    margin: 2em;
}
.footer a {
    color: white;
    font-weight: bold;
}